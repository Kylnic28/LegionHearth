/*
 * Copyright (C) 2008-2018 TrinityCore <https://www.trinitycore.org/>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef endless_halls_h__
#define endless_halls_h__

#include "CreatureAIImpl.h"

#define EndlessHallsScriptName "instance_endless_halls"
#define DataHeader "EH"

enum EHDataTypes
{
    DATA_RUNE_BLEU = 0,
    DATA_RUNE_ROUGE = 1,
    DATA_RUNE_VERT = 2,
    DATA_RUNE_JAUNE = 3,
    DATA_RUNE_VIOLET = 4,

    DATA_ORBE_BLEU = 5,
    DATA_ORBE_ROUGE = 6, 
    DATA_ORBE_VERT = 7, 
    DATA_ORBE_JAUNE = 8, 
    DATA_ORBE_VIOLET = 9,

    DATA_TP_NORTH = 10,
    DATA_TP_SOUTH = 11, 
    DATA_TP_EAST = 12,
    DATA_TP_WEST = 13,

    DATA_ROCK_NORTH = 14,
    DATA_ROCK_SOUTH = 15,
    DATA_ROCK_EAST = 16,
    DATA_ROCK_WEST = 17,

    DATA_PICK_RUNE = 18,
    DATA_PICK_ORBE = 19,
    DATA_DIRECTION = 20,
};

enum EHGameObjectsIds
{
    GO_RUNE_BLEU = 272215,
    GO_RUNE_ROUGE = 272217,
    GO_RUNE_VERT = 272216,
    GO_RUNE_JAUNE = 272218,
    GO_RUNE_VIOLET = 272219,

    GO_ORBE_BLEU = 272211,
    GO_ORBE_ROUGE = 272210,
    GO_ORBE_VERT = 272214,
    GO_ORBE_JAUNE = 272213,
    GO_ORBE_VIOLET = 272212,

    // Not blizzlike gobs, can't find the real entries
    GO_TP_NORTH = 5000,
    GO_TP_SOUTH = 5001,
    GO_TP_EAST = 5002,
    GO_TP_WEST = 5003,

    GO_ROCK_NORTH  = 5004,
    GO_ROCK_SOUTH  = 5005,
    GO_ROCK_EAST = 5006,
    GO_ROCK_WEST = 5007,
};

enum EHSpells
{
    SPELL_DIRECT_NORTH = 247350,
    SPELL_DIRECT_SOUTH = 247351,
    SPELL_DIRECT_EAST = 247352,
    SPELL_DIRECT_WEST = 247353,

    SPELL_DIRECT_BLACKOUT = 144149,

    SPELL_DIRECT_VICTORY = 247348,

    SPELL_BLUE_ORB = 247322,
    SPELL_RED_ORB = 247321,
    SPELL_GREEN_ORB = 247326,
    SPELL_YELLOW_ORB = 247323,
    SPELL_VIOLET_ORB = 247324,

    SPELL_MUTE_PLAYER = 1852,

    SPELL_HIDDEN_AURA_1SEC = 218611, // Swimmer Teleport
    SPELL_EXIT_MAZE = 253764, // 000

    // SPELL_EXIT_MAZE = 247349, // Teleport out, Shit spell not working, maybe edit SpellEffect and m_caster->GetPlayer
    // Creer un gob de tp comme les autres et cast ce spell
    // Utiliser méthode OnCast, puis unaura le joueur, tp le joueur en extérieur et ensuite on détruit l'instance.

};

enum EHPhases
{
    PHASE_INVISIBLE = 175,
    PHASE_REMOVED = 176
};

enum EHMaze
{
    INSTANCE_MAZE_X = 0,
    INSTANCE_MAZE_Y = 0
};

// Mazes template, make a randomizer later.
const std::string mazeTemplate[10] = {
    "0110010101010111010101010001011001010011110000110110100101100101010110010110100100101010101001101001010001010011110000111010101010101100011101010011111000011010111010011110000110100010110010110110101111000011110000111010101001101001101010000100110100011010101010101100000111000011011001010101101110101100001101100101100111100011010010011100001111001001011000111000110001010101010111010101010110011000",
    "0110000101100001011001010101010101110011101000101110001110100110010100011010101011001011101011001001110000110110100110100010101011000101010101011011101000101010101011000011011001010101100110101110100111100001101010000110010100111010110000111100001111000101100100101100100101101001011011010011011000111110011100011010001011100011100010101010101010100110100110101000110001011001110010011100110101011001",
    "0110010100010110010101010101011100110010111001010011110000110010011010011100100110100110100101101001101011000101010100111000110000111100010111010011011001011011011000111010011001010101100110100110100110101100100110100110010100011010101000101110010101011101100101100101100111001011101001000011011001011001010000110110100110100110100110100110011101011001101000101000110001011001100011000101010111011001",
    "0110010101110101010101010101001101100011101000101010011001110101000110101010101011001011101010101000011001011001101010000110100110101100010110010110001111000011101001101001011001010011101011000101100110101100010111010001101010100110001100101000011000110110010110111010101010101010011010011100100101101001110010011100101110100110010100111000011001110101000110101100110100011100010110011100010101011001",
    "0110001101100011011001110011011001110011101011001001101010101010100010101010101011100101001110001010101001101001101010101100001111000101100111001101001110101000011010010110001100100110001110001100001111000101100110101010101011000101010110110010011000011100101111000101001101001001101011000111010111010101000110100110001111000011100001100101010100111100100110100100110101011001010001011101010101011001",
    "0110010100110110011100110110001101100011111000111010100010101010100011101001101010101010110001011001110000111100001110101000110000110010011000111100001110101010011001011001101010101010011010011000101010100010011011011001110010010110001110101010111010010110010100110110100111001011101011000101100100101100100101100001101010100010011001011101011100011110010110011000110011010101000111000101110101010001",
    "0110010101010101001101100101001101000011101001000011011011011001001011000011101011100011111010010110001111000101110110111000101011100001101011000101010100111000011010011000011010010100011100111100001111100101010111010111010110011100000110101100001101100011100001100101010100111010011010011010110001011001001001101001101011000011101001100101001110101100001110100100100111001101000110001100010111011001",
    "0110010101010101010100110100011101010011101001000101001100101010011010010110100110100110001110101100100110100100110100111010101010101110000101101101010100111010101010101010111001011101010100111010100011001001101011000011011000111000110000110010011010010110100110101010011000111010101010100010111000011010110010011010101011101001110010010110100101100011110010111100010101010101100101001001110001011001",
    "0110010101010101010100110100010101110011110000110010011000111010011000111010101001001001111010011010110010011100100110100110001110100110110101010101011100011010101010101010110000110100011110010110100110101100110100011100001110100010101000101010001001100101010110011100101110101010101010101100010101010011011010011100101111001011010001110011101010000110001110100100110101011001100011000101100111001001",
    "0110011101010101001101100101001101100011101011000101001111001001011010011010101010100110000111000011011010010100101110101010101001100011101011000101010110011010110010011010110010010100011100110110100101100101100101000101011110011000110000111010011001010101001111000011011001011001110011010101001111000011110011010101001101100101001111000001110000110110001110101100000111000101010101011001100011001001"
};



template<typename AI>
inline AI* GetEndlessHallsAI(Creature* creature)
{
    return GetInstanceAI<AI>(creature, EndlessHallsScriptName);
}

#endif // endless_halls_h__
